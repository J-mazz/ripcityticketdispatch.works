openapi: 3.0.3
info:
  title: Rip City Ticket Dispatch API
  version: 1.0.0
  description: |
    AI-powered ticket deal discovery and alert system for Portland Trail Blazers and events.
    TCPA-compliant SMS messaging with subscription tiers.
  contact:
    name: Joseph Mazzini
    email: joseph@mazzlabs.works
    url: https://ripcityticketdispatch.works
  license:
    name: Proprietary
    url: https://ripcityticketdispatch.works/legal/terms

servers:
  - url: https://api.ripcityticketdispatch.works
    description: Production API
  - url: https://ripcityticketdispatch.works/api
    description: Alternative production endpoint

paths:
  /health:
    get:
      summary: Health check endpoint
      description: Returns API health status
      tags:
        - System
      responses:
        '200':
          description: API is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [healthy, degraded]
                  timestamp:
                    type: string
                    format: date-time
                  version:
                    type: string
                  database:
                    type: string
                    enum: [connected, disconnected]

  /api/users/register:
    post:
      summary: Register new user
      description: Create a new user account with email and phone validation
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                  format: email
                  maxLength: 255
                  example: user@example.com
                phone:
                  type: string
                  pattern: '^(\+1)?[2-9]\d{2}[2-9]\d{2}\d{4}$'
                  example: "+15031234567"
                smsConsent:
                  type: boolean
                  default: false
                preferences:
                  type: object
                  properties:
                    emailAlerts:
                      type: boolean
                      default: true
                    maxAlertsPerDay:
                      type: integer
                      minimum: 1
                      maximum: 100
                      default: 5
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          description: User already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/users/login:
    post:
      summary: User login
      description: Authenticate user and return JWT token
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  minLength: 8
                  maxLength: 128
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                  user:
                    $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /api/deals:
    get:
      summary: Get current ticket deals
      description: Retrieve AI-scored ticket deals with filtering options
      tags:
        - Deals
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: offset
          in: query
          schema:
            type: integer
            minimum: 0
            default: 0
        - name: minScore
          in: query
          description: Minimum AI deal score (0-100)
          schema:
            type: number
            minimum: 0
            maximum: 100
        - name: venue
          in: query
          schema:
            type: string
            maxLength: 100
        - name: category
          in: query
          schema:
            type: string
            enum: [sports, music, theater, comedy, family]
        - name: dateFrom
          in: query
          schema:
            type: string
            format: date
        - name: dateTo
          in: query
          schema:
            type: string
            format: date
      responses:
        '200':
          description: List of deals
          content:
            application/json:
              schema:
                type: object
                properties:
                  deals:
                    type: array
                    items:
                      $ref: '#/components/schemas/Deal'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '400':
          $ref: '#/components/responses/BadRequest'

  /api/deals/{dealId}:
    get:
      summary: Get specific deal
      description: Retrieve detailed information about a specific deal
      tags:
        - Deals
      parameters:
        - name: dealId
          in: path
          required: true
          schema:
            type: string
            pattern: '^[0-9a-fA-F]{24}$'
      responses:
        '200':
          description: Deal details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Deal'
        '404':
          $ref: '#/components/responses/NotFound'

  /api/sms-consent:
    post:
      summary: SMS consent management
      description: Handle SMS opt-in/opt-out requests (TCPA compliant)
      tags:
        - SMS
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - phone
                - consent
              properties:
                phone:
                  type: string
                  pattern: '^(\+1)?[2-9]\d{2}[2-9]\d{2}\d{4}$'
                consent:
                  type: boolean
                source:
                  type: string
                  maxLength: 50
                  example: "website_signup"
                doubleOptIn:
                  type: boolean
                  default: false
      responses:
        '200':
          description: Consent recorded
          content:
            application/json:
              schema:
                type: object
                properties:
                  phone:
                    type: string
                  consent:
                    type: boolean
                  timestamp:
                    type: string
                    format: date-time
                  confirmationSent:
                    type: boolean
        '400':
          $ref: '#/components/responses/BadRequest'

  /api/subscriptions:
    get:
      summary: Get user subscription
      description: Retrieve current user's subscription details
      tags:
        - Subscriptions
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Subscription details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subscription'
        '401':
          $ref: '#/components/responses/Unauthorized'

    post:
      summary: Create subscription
      description: Create or upgrade user subscription
      tags:
        - Subscriptions
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - tier
              properties:
                tier:
                  type: string
                  enum: [pro, premium, enterprise]
                paymentMethodId:
                  type: string
                  minLength: 1
                  maxLength: 100
      responses:
        '201':
          description: Subscription created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subscription'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /api/alerts:
    get:
      summary: Get alert history
      description: Retrieve user's alert delivery history
      tags:
        - Alerts
      security:
        - bearerAuth: []
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 50
        - name: status
          in: query
          schema:
            type: string
            enum: [pending, sent, failed, delivered]
      responses:
        '200':
          description: Alert history
          content:
            application/json:
              schema:
                type: object
                properties:
                  alerts:
                    type: array
                    items:
                      $ref: '#/components/schemas/Alert'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /api/webhooks/stripe:
    post:
      summary: Stripe webhook handler
      description: Handle Stripe payment webhooks
      tags:
        - Webhooks
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                type:
                  type: string
                data:
                  type: object
                created:
                  type: integer
                id:
                  type: string
      responses:
        '200':
          description: Webhook processed
        '400':
          $ref: '#/components/responses/BadRequest'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          pattern: '^[0-9a-fA-F]{24}$'
        email:
          type: string
          format: email
        phone:
          type: string
          nullable: true
        subscription:
          $ref: '#/components/schemas/Subscription'
        preferences:
          type: object
          properties:
            smsConsent:
              type: boolean
            emailAlerts:
              type: boolean
            maxAlertsPerDay:
              type: integer
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Deal:
      type: object
      properties:
        id:
          type: string
          pattern: '^[0-9a-fA-F]{24}$'
        eventId:
          type: string
          pattern: '^[0-9a-fA-F]{24}$'
        event:
          $ref: '#/components/schemas/Event'
        originalPrice:
          type: number
          minimum: 0
        currentPrice:
          type: number
          minimum: 0
        dealScore:
          type: number
          minimum: 0
          maximum: 100
        discountPercent:
          type: number
          minimum: 0
          maximum: 100
        section:
          type: string
          nullable: true
        row:
          type: string
          nullable: true
        seats:
          type: array
          items:
            type: string
        url:
          type: string
          format: uri
        isActive:
          type: boolean
        createdAt:
          type: string
          format: date-time
        expiresAt:
          type: string
          format: date-time

    Event:
      type: object
      properties:
        id:
          type: string
          pattern: '^[0-9a-fA-F]{24}$'
        name:
          type: string
          maxLength: 255
        venue:
          type: string
          maxLength: 255
        date:
          type: string
          format: date-time
        category:
          type: string
          enum: [sports, music, theater, comedy, family]
        source:
          type: string
          enum: [ticketmaster, eventbrite, manual]
        externalId:
          type: string
          nullable: true
        priceRange:
          type: object
          properties:
            min:
              type: number
              minimum: 0
            max:
              type: number
              minimum: 0
        createdAt:
          type: string
          format: date-time

    Subscription:
      type: object
      properties:
        tier:
          type: string
          enum: [free, pro, premium, enterprise]
        status:
          type: string
          enum: [active, canceled, past_due, incomplete]
        stripeCustomerId:
          type: string
          nullable: true
        stripeSubscriptionId:
          type: string
          nullable: true
        currentPeriodStart:
          type: string
          format: date-time
          nullable: true
        currentPeriodEnd:
          type: string
          format: date-time
          nullable: true
        features:
          type: object
          properties:
            maxAlertsPerDay:
              type: integer
            smsAlerts:
              type: boolean
            webhookAlerts:
              type: boolean
            apiAccess:
              type: boolean

    Alert:
      type: object
      properties:
        id:
          type: string
          pattern: '^[0-9a-fA-F]{24}$'
        userId:
          type: string
          pattern: '^[0-9a-fA-F]{24}$'
        dealId:
          type: string
          pattern: '^[0-9a-fA-F]{24}$'
        type:
          type: string
          enum: [email, sms, webhook]
        status:
          type: string
          enum: [pending, sent, failed, delivered]
        sentAt:
          type: string
          format: date-time
          nullable: true
        deliveredAt:
          type: string
          format: date-time
          nullable: true
        createdAt:
          type: string
          format: date-time

    Pagination:
      type: object
      properties:
        limit:
          type: integer
        offset:
          type: integer
        total:
          type: integer
        hasMore:
          type: boolean

    Error:
      type: object
      properties:
        error:
          type: string
        message:
          type: string
        code:
          type: string
          nullable: true
        details:
          type: object
          nullable: true

  responses:
    BadRequest:
      description: Bad request - validation error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: "Validation Error"
            message: "Invalid email format"
            code: "INVALID_EMAIL"

    Unauthorized:
      description: Unauthorized - invalid or missing token
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: "Unauthorized"
            message: "Invalid or expired token"
            code: "INVALID_TOKEN"

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: "Not Found"
            message: "Deal not found"
            code: "DEAL_NOT_FOUND"

    RateLimit:
      description: Rate limit exceeded
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: "Rate Limit Exceeded"
            message: "Too many requests. Try again later."
            code: "RATE_LIMIT"

# Security and rate limiting
security:
  - bearerAuth: []

# Rate limiting rules
x-rate-limit:
  - path: "/api/*"
    methods: ["GET"]
    rate: "1000/hour"
    per: "ip"
  - path: "/api/sms-consent"
    methods: ["POST"]
    rate: "10/hour"
    per: "ip"
  - path: "/api/users/register"
    methods: ["POST"]
    rate: "5/hour"
    per: "ip"
  - path: "/api/subscriptions"
    methods: ["POST"]
    rate: "3/hour"
    per: "user"

# Cloudflare-specific extensions
x-cloudflare:
  security:
    - block_malformed_requests: true
    - validate_json_schema: true
    - rate_limiting: true
    - ddos_protection: true
  cache:
    - path: "/api/deals"
      ttl: 300  # 5 minutes
    - path: "/health"
      ttl: 60   # 1 minute
